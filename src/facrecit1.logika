import org.sireum.logika._

l"""{
    fact
        def factorial(n: Z): Z
        fZero. factorial(0) == 1
        fPos. forall x: Z x > 0 implies factorial(x) = factorial(x - 1) * x
}"""

@pure def f(i: Z): Z = {
    l"""{
        requires i >= 0
        ensures result == factorial(i)
    }"""
    if (i == 0) {
        val r: Z = 1
        l"""{
            1. r == 1 premise
            2. i == 0 premise
            3. factorial(0) == 1 fact fZero
            4. factorial(i) == 1 subst2 2 3
            5. factorial(i) == r subst2 1 4
            6. r == factorial(i) algebra 5
        }"""
        return r
    } else {
        l"""{
            1. !(i == 0) premise
            2. i >= 0 premise
            3. i > 0 algebra 1 2
            4. i - 1 >= 0 algebra 3
        }"""
        val j: Z = f(i - 1)
        l"""{
            1. j = factorial(i - 1) premise
        }"""
        val r: Z = j * i
        l"""{
            1. j == factorial(i - 1) premise
            2. r == j * i premise
            3. r == factorial(i - 1) * i subst1 1 2
            4. forall x: Z x > 0 implies factorial(x) = factorial(x - 1) * x fact fPos
            5. i > 0 implies factorial(i) = factorial(i - 1) * i alle 4 i
            6. i > 0 premise
            7. factorial(i) = factorial(i - 1) * i impliese 5 6
            8. r == factorial(i) subst2 7 3
        }"""
        return r
    }
}

// compute factorial function in a while loop

val n: Z = readInt()
assume(n >= 0)

var i: Z = 0
var fac: Z = 1
l"""{
    1. i == 0 premise
    2. n >= 0 premise
    3. i <= n algebra 1 2
    4. fac == 1 premise
    5. factorial(0) == 1 fact fZero
    6. fac == factorial(0) subst2 5 4
    7. fac == factorial(i) subst2 1 6
    8. i >= 0 algebra 1
}"""
while (i < n) {
    l"""{
        invariant i <= n
                  fac == factorial(i)
                  i >= 0
        modifies i, fac
    }"""
    i = i + 1
    l"""{
        1. i_old < n premise
        2. i = i_old + 1 premise
        3. i <= n algebra 1 2
        4. fac == factorial(i_old) premise
        5. i == i_old + 1 premise
        6. i_old == i - 1 algebra 5
        7. fac == factorial(i - 1) subst1 6 4
        8. i_old >= 0 premise
        9. i > 0 algebra 5 8
    }"""
    fac = fac * i
    l"""{
        1. i <= n premise
        2. fac_old == factorial(i - 1) premise
        3. fac == fac_old * i premise
        4. fac == factorial(i - 1) * i subst1 2 3
        5. forall x: Z x > 0 implies factorial(x) = factorial(x - 1) * x fact fPos
        6. i > 0 implies factorial(i) = factorial(i - 1) * i alle 5 i
        7. i > 0 premise
        8. factorial(i) = factorial(i - 1) * i impliese 6 7
        9. fac == factorial(i) subst2 8 4
        10. i >= 0 algebra 7
    }"""
}
l"""{
    1. !(i < n) premise
    2. i >= n algebra 1
    3. i <= n premise
    4. i == n algebra 2 3
    5. fac == factorial(i) premise
    6. fac == factorial(n) subst1 4 5
}"""
assert(i == n)
val fn: Z = f(n)
l"""{
    1. fac == factorial(n) premise
    2. fn == factorial(n) premise
    3. fac == fn subst2 2 1
}"""
assert(fac == fn)